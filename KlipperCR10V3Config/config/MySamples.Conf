

# This file contains an example configuration to use a PWM-controlled tool
# such as a laser or spindle.
# See docs/Using_PWM_Tools.md for a more detailed description.

#[pwm_tool TOOL]
#pin: !ar9       # use your fan's pin number
#hardware_pwm: True
#cycle_time: 0.001
#shutdown_value: 0
#maximum_mcu_duration: 5
        # Default: 0 (disabled)
        # Amount of time in which the host has to acknowledge
        # a non-shutdown output value.
        # Suggested value is around 5 seconds.
        # Use a value that does not burn up your stock.
        # Please note that during homing, your tool
        # needs to be in default speed.

#[gcode_macro M3]
#gcode:
#    {% set S = params.S|default(0.0)|float %}
#    SET_PIN PIN=TOOL VALUE={S / 255.0}

#[gcode_macro M4]
#gcode:
#    {% set S = params.S|default(0.0)|float %}
#    SET_PIN PIN=TOOL VALUE={S / 255.0}

#[gcode_macro M5]
#gcode:
#    SET_PIN PIN=TOOL VALUE=0


# Optional: LCD Menu Control

#[menu __main __control __toolonoff]
#type: input
#enable: {'pwm_tool TOOL' in printer}
#name: Fan: {'ON ' if menu.input else 'OFF'}
#input: {printer['pwm_tool TOOL'].value}
#input_min: 0
#input_max: 1
#input_step: 1
#gcode:
#    M3 S{255 if menu.input else 0}

#[menu __main __control __toolspeed]
#type: input
#enable: {'pwm_tool TOOL' in printer}
#name: Tool speed: {'%3d' % (menu.input*100)}%
#input: {printer['pwm_tool TOOL'].value}
#input_min: 0
#input_max: 1
#input_step: 0.01
#gcode:
#    M3 S{'%d' % (menu.input*255)}




# Example1: A led strip controlled by the GPIO20 on the RPi
;[output_pin caselight]
;pin: host:gpio20
# You can also write the pin in extended form by specifying
# the reference gpiochip.
#pin: host:gpiochip0/gpio20

;[gcode_macro TOGGLE_CASELIGHT]
;gcode:
;  SET_PIN PIN=caselight VALUE={(not printer['output_pin caselight'].value)|int}


# Example2: Using the i2c bus of the RPi to read a sensor
#[temperature_sensor enclosure_temp]
#sensor_type: HTU21D
#i2c_mcu: host
#i2c_bus: i2c.1
#htu21d_hold_master: False

#[gcode_macro QUERY_ENCLOSURE]
#gcode:
#    {% set sensor = printer["htu21d enclosure_temp"] %}
#    {action_respond_info(
#        "Temperature: %.2f C\n"
#        "Humidity: %.2f%%" % (
#            sensor.temperature,
#            sensor.humidity))}

# Example 3:Using a pin on another gpiochip connected to the RPi
# (in this case on an MCP23017)
#[fan]
#pin: host:gpiochip2/gpio7




#Uncomment the following lines if you have a BL-Touch
#[bltouch]
#sensor_pin: ^PD2 #^ar19
#control_pin: PB5 #ar11
#set_output_mode: 5V
#pin_move_time: 0.4
#stow_on_each_sample: False
#probe_with_touch_mode: False
#x_offset: 45.75
#y_offset: -3.40
#z_offset:  3.28
#samples: 2
#sample_retract_dist: 2
#samples_result: average

#Uncomment the following lines if you have a BL-Touch
#[bed_mesh]
#speed: 50
#horizontal_move_z: 6
#mesh_min: 46.50,0.75
#mesh_max: 253.5,295.85
#probe_count: 7,7
#algorithm: bicubic

#Uncomment the following lines if you have a BL-Touch
#[screws_tilt_adjust]
#screw1: 0,29
#screw1_name: front left screw
#screw2: 228,29
#screw2_name: front right screw
#screw3: 228,269
#screw3_name: rear right screw
#screw4: 0,269
#screw4_name: rear left screw
#speed: 50
#horizontal_move_z: 10
#screw_thread: CW-M3







# Common parameters available for all menu config sections.
#[menu __some_list __some_name]
#type: disabled
#   Permanently disabled menu element, only required attribute is 'type'.
#   Allows you to easily disable/hide existing menu items.

#[menu some_name]
#type:
#   One of command, input, list, text:
#       command - basic menu element with various script triggers
#       input   - same like 'command' but has value changing capabilities.
#                 Press will start/stop edit mode.
#       list    - it allows for menu items to be grouped together in a
#                 scrollable list.  Add to the list by creating menu
#                 configurations using "some_list" as a prefix - for
#                 example: [menu some_list some_item_in_the_list]
#       vsdlist - same as 'list' but will append files from virtual sdcard
#                 (will be removed in the future)
#name:
#   Name of menu item - evaluated as a template.
#enable:
#   Template that evaluates to True or False.
#index:
#   Position where an item needs to be inserted in list. By default
#   the item is added at the end.

#[menu some_list]
#type: list
#name:
#enable:
#   See above for a description of these parameters.

#[menu some_list some_command]
#type: command
#name:
#enable:
#   See above for a description of these parameters.
#gcode:
#   Script to run on button click or long click. Evaluated as a
#   template.

#[menu some_list some_input]
#type: input
#name:
#enable:
#   See above for a description of these parameters.
#input:
#   Initial value to use when editing - evaluated as a template.
#   Result must be float.
#input_min:
#   Minimum value of range - evaluated as a template. Default -99999.
#input_max:
#   Maximum value of range - evaluated as a template. Default 99999.
#input_step:
#   Editing step - Must be a positive integer or float value. It has
#   internal fast rate step. When "(input_max - input_min) /
#   input_step > 100" then fast rate step is 10 * input_step else fast
#   rate step is same input_step.
#realtime:
#   This attribute accepts static boolean value. When enabled then
#   gcode script is run after each value change. The default is False.
#gcode:
#   Script to run on button click, long click or value change.
#   Evaluated as a template. The button click will trigger the edit
#   mode start or end.







# This file defines the default layout of the printer's menu.

# It is not necessary to edit this file to change the menu. Instead,
# one may override any of the sections defined here by defining a
# section with the same name in the main printer.cfg config file.

### DEFAULT MENU ###
# Main
#   + Tune
#       + Speed: 000%
#       + Flow: 000%
#       + Offset Z:00.00
#   + OctoPrint
#       + Pause printing
#       + Resume printing
#       + Abort printing
#   + SD Card
#       + Start printing
#       + Resume printing
#       + Pause printing
#       + Cancel printing
#       + ... (files)
#   + Control
#       + Home All
#       + Home Z
#       + Home X/Y
#       + Steppers off
#       + Fan: OFF
#       + Fan speed: 000%
#       + Lights: OFF
#       + Lights: 000%
#       + Move 10mm
#           + Move X:000.0
#           + Move Y:000.0
#           + Move Z:000.0
#           + Move E:+000.0
#       + Move 1mm
#           + Move X:000.0
#           + Move Y:000.0
#           + Move Z:000.0
#           + Move E:+000.0
#       + Move 0.1mm
#           + Move X:000.0
#           + Move Y:000.0
#           + Move Z:000.0
#           + Move E:+000.0
#   + Temperature
#       + Ex0:000 (0000)
#       + Ex1:000 (0000)
#       + Bed:000 (0000)
#       + Preheat PLA
#           + Preheat all
#           + Preheat hotend
#           + Preheat hotbed
#       + Preheat ABS
#           + Preheat all
#           + Preheat hotend
#           + Preheat hotbed
#       + Cooldown
#           + Cooldown all
#           + Cooldown hotend
#           + Cooldown hotbed
#   + Filament
#       + Ex0:000 (0000)
#       + Load Fil. fast
#       + Load Fil. slow
#       + Unload Fil.fast
#       + Unload Fil.slow
#       + Feed: 000.0
#   + Setup
#       + Save config
#       + Restart
#           + Restart host
#           + Restart FW
#       + PID tuning
#           + Tune Hotend PID
#           + Tune Hotbed PID
#       + Calibration
#           + Delta cal. auto
#           + Delta cal. man
#               + Start probing
#               + Move Z: 000.00
#               + Test Z: ++
#               + Accept
#               + Abort
#           + Bed probe
#       + Dump parameters


;[filament_motion_sensor my_sensor]
;detection_length: 7.0
#   The minimum length of filament pulled through the sensor to trigger
#   a state change on the switch_pin
#   Default is 7 mm.
;extruder:
#   The name of the extruder section this sensor is associated with.
#   This parameter must be provided.
;switch_pin:
#pause_on_runout:
#runout_gcode:
#insert_gcode:
#event_delay:
#pause_delay:
#   See the "filament_switch_sensor" section for a description of the
#   above parameters.

#[temperature_fan my_temp_fan]
#pin:
#max_power:
#shutdown_speed:
#cycle_time:
#hardware_pwm:
#kick_start_time:
#off_below:
#tachometer_pin:
#tachometer_ppr:
#tachometer_poll_interval:
#   See the "fan" section for a description of the above parameters.
#sensor_type:
#sensor_pin:
#control:
#max_delta:
#min_temp:
#max_temp:
#   See the "extruder" section for a description of the above parameters.
#pid_Kp:
#pid_Ki:
#pid_Kd:
#   The proportional (pid_Kp), integral (pid_Ki), and derivative
#   (pid_Kd) settings for the PID feedback control system. Klipper
#   evaluates the PID settings with the following general formula:
#     fan_pwm = max_power - (Kp*e + Ki*integral(e) - Kd*derivative(e)) / 255
#   Where "e" is "target_temperature - measured_temperature" and
#   "fan_pwm" is the requested fan rate with 0.0 being full off and
#   1.0 being full on. The pid_Kp, pid_Ki, and pid_Kd parameters must
#   be provided when the PID control algorithm is enabled.
#pid_deriv_time: 2.0
#   A time value (in seconds) over which temperature measurements will
#   be smoothed when using the PID control algorithm. This may reduce
#   the impact of measurement noise. The default is 2 seconds.
#target_temp: 40.0
#   A temperature (in Celsius) that will be the target temperature.
#   The default is 40 degrees.
#max_speed: 1.0
#   The fan speed (expressed as a value from 0.0 to 1.0) that the fan
#   will be set to when the sensor temperature exceeds the set value.
#   The default is 1.0.
#min_speed: 0.3
#   The minimum fan speed (expressed as a value from 0.0 to 1.0) that
#   the fan will be set to for PID temperature fans.
#   The default is 0.3.
#gcode_id:
#   If set, the temperature will be reported in M105 queries using the
#   given id. The default is to not report the temperature via M105.












